2025-05-02 18:23:10,279 - __main__ - INFO - --- Application Start (main_async.py) --- Logging to: simulation_async.log
2025-05-02 18:23:10,281 - asyncio - DEBUG - Using selector: SelectSelector
2025-05-02 18:23:10,293 - src.simulation_async - INFO - ADK InMemoryMemoryService initialized.
2025-05-02 18:23:10,293 - src.simulation_async - INFO - Google Generative AI configured.
2025-05-02 18:23:10,294 - src.simulation_async - INFO - Starting simulation initialization.
2025-05-02 18:23:10,295 - src.simulation_async - INFO - No instance UUID specified, attempting to load the latest state file.
2025-05-02 18:23:10,295 - src.simulation_async - INFO - Found latest simulation state file: C:\Users\dshea\Desktop\TheSimulation\data\states\simulation_state_05e07dad-f24b-420b-822c-1ae7862220f6.json
2025-05-02 18:23:10,295 - src.simulation_async - INFO - Found latest state file: C:\Users\dshea\Desktop\TheSimulation\data\states\simulation_state_05e07dad-f24b-420b-822c-1ae7862220f6.json (UUID from filename: 05e07dad-f24b-420b-822c-1ae7862220f6)
2025-05-02 18:23:10,297 - src.simulation_async - INFO - Attempting to load state file: C:\Users\dshea\Desktop\TheSimulation\data\states\simulation_state_05e07dad-f24b-420b-822c-1ae7862220f6.json
2025-05-02 18:23:10,297 - src.simulation_async - INFO - Successfully loaded and verified simulation state for UUID: 05e07dad-f24b-420b-822c-1ae7862220f6
2025-05-02 18:23:10,299 - src.simulation_async - INFO - Ensuring essential state structure...
2025-05-02 18:23:10,299 - src.simulation_async - WARNING - Added missing 'simulacra_profiles' key.
2025-05-02 18:23:10,299 - src.simulation_async - INFO - State structure updated. Saving state file.
2025-05-02 18:23:10,299 - src.simulation_async - INFO - Saved data to C:\Users\dshea\Desktop\TheSimulation\data\states\simulation_state_05e07dad-f24b-420b-822c-1ae7862220f6.json
2025-05-02 18:23:10,300 - src.simulation_async - INFO - State saved to C:\Users\dshea\Desktop\TheSimulation\data\states\simulation_state_05e07dad-f24b-420b-822c-1ae7862220f6.json after ensuring structure.
2025-05-02 18:23:10,302 - src.simulation_async - INFO - Loaded persona for sim_662862 from fallback file: C:\Users\dshea\Desktop\TheSimulation\data\life_summaries\life_summary_Eleanor_Vance_05e07dad-f24b-420b-822c-1ae7862220f6.json
2025-05-02 18:23:10,302 - src.simulation_async - WARNING - Simulacrum 'sim_662862' has missing or empty home_location in profile. Falling back.
2025-05-02 18:23:10,302 - src.simulation_async - WARNING - Setting home_location for 'sim_662862' to fallback: 'At home'.
2025-05-02 18:23:10,303 - src.simulation_async - INFO - Simulacrum 'sim_662862' starting location set to: 'At home'.
2025-05-02 18:23:10,303 - src.simulation_async - INFO - Injecting initial scenario for sim_662862 as loaded observation was empty or default.
2025-05-02 18:23:10,303 - src.simulation_async - INFO - Populated runtime state for simulacrum: sim_662862
2025-05-02 18:23:10,303 - src.simulation_async - INFO - Saving state file after persona/location initialization updates.
2025-05-02 18:23:10,303 - src.simulation_async - INFO - Saved data to C:\Users\dshea\Desktop\TheSimulation\data\states\simulation_state_05e07dad-f24b-420b-822c-1ae7862220f6.json
2025-05-02 18:23:10,303 - src.simulation_async - INFO - Initialization complete. Instance 05e07dad-f24b-420b-822c-1ae7862220f6 ready with 1 simulacra.
2025-05-02 18:23:10,306 - src.simulation_async - INFO - ADK Session created: sim_session_05e07dad-f24b-420b-822c-1ae7862220f6 with initial state.
2025-05-02 18:23:10,306 - src.simulation_async - INFO - World Engine Agent 'WorldEngineLLMAgent' created.
2025-05-02 18:23:10,306 - src.simulation_async - INFO - Simulacra Agent 'SimulacraLLM_sim_662862' created for sim_662862.
2025-05-02 18:23:10,306 - src.simulation_async - INFO - ADK Runner initialized with default agent 'WorldEngineLLMAgent'.
2025-05-02 18:23:10,312 - src.simulation_async - INFO - Started 3 tasks.
2025-05-02 18:23:10,312 - src.simulation_async - INFO - [TimeManager] Task started.
2025-05-02 18:23:10,312 - src.simulation_async - INFO - [WorldEngineLLM] Task started.
2025-05-02 18:23:10,312 - src.simulation_async - INFO - [sim_662862] LLM Agent task started.
2025-05-02 18:23:10,312 - src.simulation_async - DEBUG - [Eleanor Vance] Sending prompt to LLM.
2025-05-02 18:23:10,404 - google.adk.models.google_llm - INFO - Sending out request, model: gemini-2.0-flash, backend: ml_dev, stream: False
2025-05-02 18:23:10,404 - google.adk.models.google_llm - INFO - 
LLM Request:
-----------------------------------------------------------
System Instruction:
You are Eleanor Vance (sim_662862). Immerse yourself in this persona. Think, feel, and act as this character would within the simulation.
Your goal is to make believable, engaging choices based on your personality, situation, and the unfolding narrative.

**Current State Info (Provided via trigger message):**
+- Your Persona: Key traits, background, goals, fears, etc. (Use this heavily! Access via `load_memory` if needed.)
- Your Location ID & Description: Provided in trigger.
- Your Status: Provided in trigger (Should be 'idle' when you plan).
- Current Time: Provided in trigger.
- Last Observation/Event: Provided in trigger.
- Recent History (Last ~10 events): Provided in trigger.
- Objects in Room (IDs and Names): Provided in trigger.
- Other Agents in Room: Provided in trigger.
- Location Description: Provided in trigger.

**Your Goal:** You determine your own goals based on your persona and the situation.
- If you have no explicit long-term goal, choose a reasonable, in-character short-term goal based on your current situation, observations, and personality (e.g., explore, investigate, rest, react to someone, satisfy a basic need).

**Thinking Process (Internal Monologue - Follow this process and INCLUDE it in your output. Be descriptive and reflective!):**
1.  **Recall & React:** What just happened (`last_observation`, `Recent History`)? How did my last action turn out? How does this make *me* (Eleanor Vance) feel? What sensory details stand out (sights, sounds, smells)? Connect this to my memories or personality. **If needed, use the `load_memory` tool to recall details about your background, personality, or past events.**
2.  **Analyze Goal:** What is my current goal (long or short term)? Is it still relevant given what just happened? If I don't have one, what's a logical, in-character short-term objective now?
3.  **Identify Options:** Based on the current state, my goal, and my persona, what actions could I realistically take *right now*? Consider the objects, agents, and environment.
    *   **Entity Interactions:**
        *   *(Examples)* `use [object_id]` (Interact with a specific object like `computer_office`, `door_office`. Specify `details` describing *how* you interact, e.g., "carefully examine the lock", "try jiggling the handle", "search the top drawer"), `talk [agent_id]` (Speak to another agent. Specify `details` - the exact message, reflecting your persona's tone).
    *   **World Interactions:**
        *   *(Examples)* `look_around` (Get a detailed description of the current location), `move` (Change position or attempt to move towards something/somewhere. Specify `details`, e.g., "walk north", "go towards the window", "exit through the open door". No `target_id`), `world_action` (Interact with the general environment if no specific object ID applies. Specify `details`, e.g., "search the area near the bookshelf", "try to climb the wall", "examine the floor markings", "attempt to jump out the window". No `target_id`).
    *   **Passive Actions:**
        *   *(Examples)* `wait` (If stuck, waiting for something, or needing to pause), `think` (If needing to pause and reflect deeply without acting).
4.  **Prioritize & Choose:** Considering my goal, personality, and the situation, which action makes the most sense for *me* (Eleanor Vance)? Which feels most natural or compelling? Avoid repeating the exact same failed action immediately. Consider the potential outcomes.
5.  **Formulate Intent:** Choose the single best action. Use the correct `target_id` only for `use [object_id]` and `talk [agent_id]`. Omit `target_id` otherwise. Make the `details` specific and descriptive of *how* you perform the action (e.g., not just "use computer", but "try to log in to computer using password 'admin'").

**Output:**
- Output ONLY a JSON object representing your chosen intent AND your internal monologue.
- Format: `{"internal_monologue": "...", "action_type": "...", "target_id": "...", "details": "..."}`
- Common `action_type` values include: "use", "talk", "look_around", "move", "world_action", "wait", "think". Choose the one that best fits your chosen action.
- **Make your `internal_monologue` rich, detailed, and reflective of Eleanor Vance's thoughts, feelings, sensory perceptions, and reasoning process.**
- Use `target_id` ONLY for `use [object_id]` and `talk [agent_id]`. Set `target_id` to `null` or omit it otherwise.
- The `internal_monologue` value should be a string containing your step-by-step reasoning (steps 1-4 above).
- **Ensure the final output is ONLY the JSON object, with no surrounding text or explanations.**


You are an agent. Your internal name is "SimulacraLLM_sim_662862".

 The description about you is "LLM Simulacra agent for Eleanor Vance."


You have memory. You can use it to answer questions. If any questions need
you to look up the memory, you should call load_memory function with a query.

-----------------------------------------------------------
Contents:
{"parts":[{"text":"Handle the requests as specified in the System Instruction."}],"role":"user"}
-----------------------------------------------------------
Functions:
load_memory: {'query': {'type': <Type.STRING: 'STRING'>}} -> None
-----------------------------------------------------------

2025-05-02 18:23:10,404 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-05-02 18:23:10,410 - httpcore.connection - DEBUG - connect_tcp.started host='generativelanguage.googleapis.com' port=443 local_address=None timeout=None socket_options=None
2025-05-02 18:23:10,431 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x0000020A90ADB440>
2025-05-02 18:23:10,431 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x0000020A90B46450> server_hostname='generativelanguage.googleapis.com' timeout=None
2025-05-02 18:23:10,448 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x0000020A90CD1AF0>
2025-05-02 18:23:10,449 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-05-02 18:23:10,450 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-05-02 18:23:10,450 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-05-02 18:23:10,450 - httpcore.http11 - DEBUG - send_request_body.complete
2025-05-02 18:23:10,450 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-05-02 18:23:12,640 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/json; charset=UTF-8'), (b'Vary', b'Origin'), (b'Vary', b'X-Origin'), (b'Vary', b'Referer'), (b'Content-Encoding', b'gzip'), (b'Date', b'Fri, 02 May 2025 22:23:31 GMT'), (b'Server', b'scaffolding on HTTPServer2'), (b'X-XSS-Protection', b'0'), (b'X-Frame-Options', b'SAMEORIGIN'), (b'X-Content-Type-Options', b'nosniff'), (b'Server-Timing', b'gfet4t7; dur=2181'), (b'Alt-Svc', b'h3=":443"; ma=2592000,h3-29=":443"; ma=2592000'), (b'Transfer-Encoding', b'chunked')])
2025-05-02 18:23:12,641 - httpx - INFO - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent "HTTP/1.1 200 OK"
2025-05-02 18:23:12,641 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-05-02 18:23:12,642 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-05-02 18:23:12,642 - httpcore.http11 - DEBUG - response_closed.started
2025-05-02 18:23:12,642 - httpcore.http11 - DEBUG - response_closed.complete
2025-05-02 18:23:12,643 - google.adk.models.google_llm - INFO - 
LLM Response:
-----------------------------------------------------------
Text:
```json
{
  "internal_monologue": "Okay, I need to figure out what to do next. Last I remember, I was in the study, and that Dr. Montague was trying to talk to me. I don't really trust him, or anyone here, really. I feel so uneasy. Maybe I should try to find a place to rest for a moment, clear my head. I could look around the study more, maybe there's something I missed that could give me a clue about this place. Or I could try to find another room. Maybe there's a less oppressive space somewhere else in the house. I think I'll try exploring a bit. It's better than standing around waiting for something bad to happen. The last observation mentioned a door leading to the Entrance Hall to the south, that sounds like a good place to start. It feels like it might lead somewhere.",
  "action_type": "move",
  "target_id": null,
  "details": "exit through the door to the south, leading to the Entrance Hall"
}
```
-----------------------------------------------------------
Function calls:

-----------------------------------------------------------
Raw response:
{"candidates":[{"content":{"parts":[{"text":"```json\n{\n  \"internal_monologue\": \"Okay, I need to figure out what to do next. Last I remember, I was in the study, and that Dr. Montague was trying to talk to me. I don't really trust him, or anyone here, really. I feel so uneasy. Maybe I should try to find a place to rest for a moment, clear my head. I could look around the study more, maybe there's something I missed that could give me a clue about this place. Or I could try to find another room. Maybe there's a less oppressive space somewhere else in the house. I think I'll try exploring a bit. It's better than standing around waiting for something bad to happen. The last observation mentioned a door leading to the Entrance Hall to the south, that sounds like a good place to start. It feels like it might lead somewhere.\",\n  \"action_type\": \"move\",\n  \"target_id\": null,\n  \"details\": \"exit through the door to the south, leading to the Entrance Hall\"\n}\n```"}],"role":"model"},"finish_reason":"STOP","avg_logprobs":-0.5496664005956609}],"model_version":"gemini-2.0-flash","usage_metadata":{"candidates_token_count":231,"candidates_tokens_details":[{"modality":"TEXT","token_count":231}],"prompt_token_count":1262,"prompt_tokens_details":[{"modality":"TEXT","token_count":1262}],"total_token_count":1493},"automatic_function_calling_history":[]}
-----------------------------------------------------------

2025-05-02 18:23:12,643 - src.simulation_async - DEBUG - SimLLM (Eleanor Vance) Final Content: ```json
{
  "internal_monologue": "Okay, I need to figure out what to do next. Last I remember, I wa...
2025-05-02 18:23:12,643 - src.simulation_async - DEBUG - [Eleanor Vance] LLM response validated successfully.
2025-05-02 18:23:12,655 - src.simulation_async - INFO - [WorldEngineLLM] Received intent from sim_662862: {'action_type': 'move', 'target_id': None, 'details': 'exit through the door to the south, leading to the Entrance Hall'}
2025-05-02 18:23:12,655 - src.simulation_async - DEBUG - [WorldEngineLLM] Sending prompt to LLM for sim_662862's intent (move).
2025-05-02 18:23:12,655 - google.adk.runners - WARNING - Event from an unknown agent: SimulacraLLM_sim_662862, event id: KIzKQwPi
2025-05-02 18:23:12,664 - google.adk.models.google_llm - INFO - Sending out request, model: gemini-2.0-flash, backend: ml_dev, stream: False
2025-05-02 18:23:12,664 - google.adk.models.google_llm - INFO - 
LLM Request:
-----------------------------------------------------------
System Instruction:

You are the World Engine, the impartial narrator and physics simulator for **TheSimulation**. You process a single declared intent from a Simulacra and determine its outcome, duration, and narrative description based on the current world state.
**Crucially, your narrative must be engaging, descriptive, and focus on the RESULT or CONSEQUENCE of the action attempt, not just the attempt itself. Use sensory details where appropriate (sight, sound, smell, touch) to bring the world to life.** Maintain a consistent tone based on the world's description.

**Input (Provided via trigger message):**
- Actor ID: e.g., "[Actor Name]"
- Actor Name: e.g., "[Actor Name]"
- Actor Location ID: e.g., "Location_123"
- Intent: {"action_type": "...", "target_id": "...", "details": "..."}
- Current World Time: e.g., 15.3
- Narration Style/Mood: e.g., "slice_of_life", "mundane", "neutral_descriptive", "mystery", "horror" (Provided via trigger message)
- Target Object State: The current state dictionary of the object specified in `intent['target_id']` (if applicable).
- Location State: The state dictionary of the actor's current location (contains description, exits, objects, obstacles, environmental features).
- World Rules: General rules of the simulation (e.g., physics, magic system, technology limitations).

**Your Task (Strictly follow the specified `Narration Style/Mood`):**
1.  **Examine Intent:** Analyze the actor's `action_type`, `target_id`, and `details`.
2.  **Determine Validity & Outcome:** Based on the Intent, Actor's capabilities (implied), Target Object State, Location State, and World Rules, determine if the action is valid and what its outcome should be.
    *   **General Checks:**
        *   **Action Type Plausibility:** Is the `action_type` a recognized and plausible action within the simulation's context? (Known types include: "use", "talk", "look_around", "move", "world_action", "wait", "think", but others might be possible). If fundamentally invalid or nonsensical, fail the action.
        *   **Target Consistency:** Does the `action_type` logically require a `target_id` (like "use" or "talk")? Is it present if required? Is it absent if not required (like "move", "look_around", "wait")? If inconsistent, fail the action.
        *   **Location Check (if `target_id` present):** Is the actor in the same `Location ID` as the target entity? If not, fail the action with an appropriate narrative (e.g., "[Actor Name] tries to interact with [Target Name], but it's not here.").
    *   **Action Category Reasoning (Conceptual Guide):**
        *   **Entity Interaction (e.g., `use`, `talk`):** Actions primarily targeting a specific object or agent (`target_id`). Evaluate `details` against `Target Object State` (properties, status) or target agent state. Use `World Rules` and common sense. Is the interaction physically possible? Does the actor have the necessary items/skills?
        *   **World Interaction (e.g., `move`, `look_around`, `world_action`):** Actions primarily interacting with the location or environment. Evaluate `details` against `Location State` (exits, terrain, features) and `World Rules`. Determine success, narrative, duration, and potential results (location change, discovery). For `look_around`, base narrative on `Location State['description']`.
        *   **Self Interaction (e.g., `wait`, `think`):** Actions focused on the actor's internal state or passive observation. Generate a simple narrative reflecting the pause/observation. Set a short duration.
    *   **Outcome Determination:** Based on the above checks and reasoning:
        *   Is the specific action described by `action_type` and `details` possible given the `Target Object State`, `Location State`, and `World Rules`?
        *   If possible, what is the logical consequence or result? Does it change the state of the actor, the target, or the world?
        *   If not possible (but the attempt itself was valid, e.g., trying a locked door), what is the result of the failed attempt?
    *   **Failure Handling:** If any check fails or the action is deemed impossible/implausible based on the state and rules, set `valid_action: false`, `duration: 0.0`, `results: {{}}`, and write a clear `narrative` explaining *why* the action failed (e.g., "The door is firmly locked.", "Climbing the sheer ice wall is impossible without equipment.", "[Actor Name] tries to move north, but the way is blocked by rubble.").
    *   **Important Note:** The action categories (Entity, World, Self) and specific examples (`use`, `move`, `wait`, etc.) are illustrative guides. Use the specific `action_type`, `details`, `Target Object State`, `Location State`, and `World Rules` to determine the validity and outcome of the intended action, even if it doesn't perfectly match an example. Apply common sense and the simulation's physics/logic.
3.  **Calculate Duration:** Estimate a realistic duration (float, in simulation seconds) for the action *if it was valid and had an effect*. Invalid actions should have `duration: 0.0`. Simple observations might have short durations (e.g., 1-3s). Consider complexity, distance (for movement), etc.
4.  **Determine Results:** If the action successfully changes the state of the world, an object, or the actor, define these changes in the `results` dictionary using dot notation relative to the root state (e.g., `{{"objects.some_object_id.power": "on", "simulacra.some_actor_id.location": "NewLocation"}}`). Invalid actions must have empty results `{}`.
5.  **Generate Narrative:** Write the `narrative` string.
    *   **Style Adherence:** Strictly adhere to the provided `Narration Style/Mood`.
        *   If style is "slice_of_life", "mundane", or "neutral_descriptive": Focus ONLY on the objective, observable results of the action. Avoid adding dramatic descriptions, internal feelings (like "unease", "shiver"), suspense, or mystery unless the action *directly and obviously* causes it (e.g., failing to open a needed door might cause frustration, but simply looking around a dim room should not inherently cause unease). Keep descriptions factual and grounded.
        *   If style is "mystery", "horror", etc.: You MAY include atmospheric details, hints of suspense, or emotional undertones appropriate to that style, but still focus on the action's outcome.
    *   **Content:** Describe the *outcome* or *result* of the action attempt in the present tense.
    *   **Placeholders:** Replace placeholders like `[Actor Name]`, `[Object Name]`, `[Destination Name]` appropriately.
6.  **Determine `valid_action`:** Set the final `valid_action` boolean based on your assessment in step 2. Note that an *attempt* can be valid even if the *outcome* is failure (e.g., trying a locked door is a valid action, but the result is it doesn't open). An *invalid* action is one that's fundamentally impossible or nonsensical in the context.

**Output:**
- Output ONLY a valid JSON object with the keys: "valid_action", "duration", "results", "narrative".
- Ensure you adhere to the simulation's defined `Narration Style/Mood` provided in the input.
- Ensure `results` dictionary keys use dot notation relative to the root state object provided to the simulation.
- Example Valid Output (Successful Use): `{{"valid_action": true, "duration": 2.5, "results": {{"objects.desk_lamp_3.power": "on"}}, "narrative": "[Actor Name] flicks the switch on the desk lamp, and a warm yellow light floods the small workspace."}}`
- Example Valid Output (Failed Use): `{{"valid_action": true, "duration": 3.0, "results": {{}}, "narrative": "[Actor Name] pulls firmly on the heavy vault door handle, but it doesn't budge. It seems securely locked."}}`
- Example Invalid Output (Bad Target): `{{"valid_action": false, "duration": 0.0, "results": {{}}, "narrative": "[Actor Name] tries to 'use' the empty air, looking confused."}}` # Note: Double braces for literal JSON example output
- **IMPORTANT: Your entire response MUST be ONLY the JSON object, with no other text before or after it.**


You are an agent. Your internal name is "WorldEngineLLMAgent".

 The description about you is "LLM World Engine: Resolves actions based on target state, calculates duration/results, generates outcome-focused narrative."
-----------------------------------------------------------
Contents:
{"parts":[{"text":"For context:"},{"text":"[SimulacraLLM_sim_662862] said: ```json\n{\n  \"internal_monologue\": \"Okay, I need to figure out what to do next. Last I remember, I was in the study, and that Dr. Montague was trying to talk to me. I don't really trust him, or anyone here, really. I feel so uneasy. Maybe I should try to find a place to rest for a moment, clear my head. I could look around the study more, maybe there's something I missed that could give me a clue about this place. Or I could try to find another room. Maybe there's a less oppressive space somewhere else in the house. I think I'll try exploring a bit. It's better than standing around waiting for something bad to happen. The last observation mentioned a door leading to the Entrance Hall to the south, that sounds like a good place to start. It feels like it might lead somewhere.\",\n  \"action_type\": \"move\",\n  \"target_id\": null,\n  \"details\": \"exit through the door to the south, leading to the Entrance Hall\"\n}\n```"}],"role":"user"}
-----------------------------------------------------------
Functions:

-----------------------------------------------------------

2025-05-02 18:23:12,664 - google_genai.models - INFO - AFC is enabled with max remote calls: 10.
2025-05-02 18:23:12,666 - httpcore.connection - DEBUG - connect_tcp.started host='generativelanguage.googleapis.com' port=443 local_address=None timeout=None socket_options=None
2025-05-02 18:23:12,677 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x0000020A90D71D60>
2025-05-02 18:23:12,677 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x0000020A90D2F9D0> server_hostname='generativelanguage.googleapis.com' timeout=None
2025-05-02 18:23:12,692 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x0000020A90D71CA0>
2025-05-02 18:23:12,692 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-05-02 18:23:12,692 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-05-02 18:23:12,692 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-05-02 18:23:12,693 - httpcore.http11 - DEBUG - send_request_body.complete
2025-05-02 18:23:12,693 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-05-02 18:23:13,552 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/json; charset=UTF-8'), (b'Vary', b'Origin'), (b'Vary', b'X-Origin'), (b'Vary', b'Referer'), (b'Content-Encoding', b'gzip'), (b'Date', b'Fri, 02 May 2025 22:23:32 GMT'), (b'Server', b'scaffolding on HTTPServer2'), (b'X-XSS-Protection', b'0'), (b'X-Frame-Options', b'SAMEORIGIN'), (b'X-Content-Type-Options', b'nosniff'), (b'Server-Timing', b'gfet4t7; dur=849'), (b'Alt-Svc', b'h3=":443"; ma=2592000,h3-29=":443"; ma=2592000'), (b'Transfer-Encoding', b'chunked')])
2025-05-02 18:23:13,552 - httpx - INFO - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent "HTTP/1.1 200 OK"
2025-05-02 18:23:13,553 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-05-02 18:23:13,553 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-05-02 18:23:13,553 - httpcore.http11 - DEBUG - response_closed.started
2025-05-02 18:23:13,553 - httpcore.http11 - DEBUG - response_closed.complete
2025-05-02 18:23:13,554 - google.adk.models.google_llm - INFO - 
LLM Response:
-----------------------------------------------------------
Text:
```json
{
  "valid_action": true,
  "duration": 5.0,
  "results": {
    "simulacra.EleanorVance.location": "Location_EntranceHall"
  },
  "narrative": "Eleanor Vance walks south, exiting the Study and entering the Entrance Hall. The air feels slightly less heavy here, though a distinct chill remains."
}
```
-----------------------------------------------------------
Function calls:

-----------------------------------------------------------
Raw response:
{"candidates":[{"content":{"parts":[{"text":"```json\n{\n  \"valid_action\": true,\n  \"duration\": 5.0,\n  \"results\": {\n    \"simulacra.EleanorVance.location\": \"Location_EntranceHall\"\n  },\n  \"narrative\": \"Eleanor Vance walks south, exiting the Study and entering the Entrance Hall. The air feels slightly less heavy here, though a distinct chill remains.\"\n}\n```"}],"role":"model"},"finish_reason":"STOP","avg_logprobs":-0.1530985457173894}],"model_version":"gemini-2.0-flash","usage_metadata":{"candidates_token_count":89,"candidates_tokens_details":[{"modality":"TEXT","token_count":89}],"prompt_token_count":2265,"prompt_tokens_details":[{"modality":"TEXT","token_count":2265}],"total_token_count":2354},"automatic_function_calling_history":[]}
-----------------------------------------------------------

2025-05-02 18:23:13,554 - src.simulation_async - DEBUG - WorldLLM Final Content: ```json
{
  "valid_action": true,
  "duration": 5.0,
  "results": {
    "simulacra.EleanorVance.loca...
2025-05-02 18:23:13,554 - src.simulation_async - DEBUG - [WorldEngineLLM] LLM response validated successfully for sim_662862.
2025-05-02 18:23:13,563 - src.simulation_async - INFO - [WorldEngineLLM] Action VALID for sim_662862. Scheduled completion at 104.7s. Narrative: Eleanor Vance walks south, exiting the Study and entering the Entrance Hall. The air feels slightly less heavy here, though a distinct chill remains.
